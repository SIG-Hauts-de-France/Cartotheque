<?php

/**
 * @file
 * Tracks file downloads for files stored in the drupal files table using the private files setting or custom private filefield.
 */

// Load all field module hooks.
module_load_include('inc', 'tic_carto_count', 'includes/tic_carto_count.field');

/**
 * Implements hook_help().
 */
function tic_carto_count_help($path, $arg) {
  switch ($path) {
    case 'admin/help#tic_carto_count':
      return '<p>' . t('Counts file downloads for private core file fields and logs a message to the watchdog table.') . '</p>';
  }
}

/**
 * Implements hook_permission().
 */
function tic_carto_count_permission() {
  $perms = array(
    'view download counts' => array(
      'title' => t('view download counts'),
    ),
    'skip download counts' => array(
      'title' => t('skip download counts'),
      'description' => t('Don\'t count downloads for users with this role.'),
    ),
    'reset download counts' => array(
      'title' => t('reset download counts'),
    ),
    'export download counts' => array(
      'title' => t('export download counts'),
    ),
  );
  return $perms;
}

/**
 * Implements hook_menu().
 */
function tic_carto_count_menu() {
  $items = array();

  $items['admin/config/media/download-count'] = array(
    'title' => 'Carto Download count',
    'description' => 'Tracks map related file downloads for files stored in private core file fields.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tic_carto_count_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'includes/tic_carto_count.settings.inc',
  );
  $items['admin/config/media/download-count/clear'] = array(
    'title' => 'Clear Cache',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tic_carto_count_clear_confirm'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/tic_carto_count.settings.inc',
  );
  $items['admin/config/media/download-count/settings'] = array(
    'title' => 'Settings',
    'weight' => 1,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/reports/download-count'] = array(
    'title' => 'Carto Download Counts',
    'description' => 'Download history of files attached to private core file fields.',
    'page callback' => 'tic_carto_count_view_page',
    'page arguments' => array('tic_carto_count'),
    'access arguments' => array('view download counts'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/tic_carto_count.pages.inc',
  );
  $items['admin/reports/download-count/%tic_carto_count_entry/reset'] = array(
    'title' => 'Download Count Reset',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tic_carto_count_reset_form', 3),
    'access arguments' => array('reset download counts'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/tic_carto_count.pages.inc',
  );

  return $items;
}

/**
 * Implements hook_views_api().
 */
function tic_carto_count_views_api() {
  return array(
    'api' => 3.0,
    'path' => drupal_get_path('module', 'tic_carto_count') . '/includes',
  );
}

/**
 * Menu wildcard loader.
 */
function tic_carto_count_entry_load($nid) {
  return $nid == 'all' ? $nid : db_query('SELECT dc.dcid, dc.nid, dc.count, n.title FROM {tic_carto_count} dc JOIN {node} n ON dc.nid = n.nid WHERE dc.nid = :dcid', array(':dcid' => $nid))->fetchObject();
}

/**
 * Implements hook_library().
 */
function tic_carto_count_library() {
  if (module_exists('libraries')) {
    $path = libraries_get_path('jquery.sparkline', FALSE) . '/jquery.sparkline.min.js';
  }
  else {
    $path = drupal_get_path('module', 'tic_carto_count') . '/jquery.sparkline.min.js';
  }

  $libraries['jquery.sparkline'] = array(
    'title' => 'jquery sparkline',
    'website' => 'http://www.omnipotent.net/jquery.sparkline/',
    'version' => '1.6',
    'js' => array(
      $path => array(),
    ),
  );
  return $libraries;
}

/**
 * Implements hook_file_download_access_alter().
 */
function tic_carto_count_file_download_access_alter(&$grants, $file, $entity_type, $entity) {
	// Ne compter que les telechargements de cartes
	$trackedFiles = Array();
	if(isset($entity->field_image_carte['und'][0]['filename'])) {
		$trackedFiles[] = $entity->field_image_carte['und'][0]['filename'];
	}
	
	if(isset($entity->field_fichier_carte['und'][0]['filename'])) {
		$trackedFiles[] = $entity->field_fichier_carte['und'][0]['filename'];
	}
	
	if(!in_array($file['filename'], $trackedFiles)) { return; }

  //if role should be skipped, return.
  if (user_access('skip download counts')) {
    return;
  }

  //if no access, simply return.
  if (!in_array(TRUE, $grants)) {
    return;
  }

  // count the download if tag is found
  if (! isset($_GET['countdl'])) {
	return;
  }

  //check flood control
  $flood_limit = variable_get('tic_carto_count_flood_limit', 0);
  if ($flood_limit > 0) {
    $flood_window = variable_get('tic_carto_count_flood_window', 5);
    if (!flood_is_allowed('tic_carto_count-fid_' . $file['fid'], $flood_limit, $flood_window)) {
      return;
    }
  }

  //validate file has extension that should be counted, if not return.
  $extensions = explode(' ', drupal_strtolower(trim(variable_get('tic_carto_count_excluded_file_extensions', 'jpg jpeg gif png'))));
  if (count($extensions)) {
    $extension = drupal_strtolower(pathinfo($file['filename'], PATHINFO_EXTENSION));
    if (in_array($extension, $extensions)) {
      return;
    }
  }

  // Count the download.
  if ($entity->type == 'carte') {
	$updated = db_update('tic_carto_count')
		->expression( 'count', 'count+1')
		->condition('nid', $entity->nid, '=')
		->execute()
	;
	// first time ?, create the counter record
	if($updated == 0) {
		db_insert('tic_carto_count')
			->fields(array(
				'nid' => $entity->nid,
				'count' => 1,
			)
		)
		->execute();
	  }
  }

  flood_register_event('tic_carto_count-fid_' . $file['fid'], 3600);

}

/**
 * Implements hook_block_info().
 */
function tic_carto_count_block_info() {
  $blocks['top_files']['info'] = t('Top Downloaded Files');
  $blocks['recent_files']['info'] = t('Recently Downloaded Files');
  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function tic_carto_count_block_configure($delta) {
  $form['tic_carto_count_' . $delta . '_block_limit'] = array(
    '#type' => 'textfield',
    '#title' => t('Number of items to display'),
    '#size' => 5,
    '#default_value' => variable_get('tic_carto_count_' . $delta . '_block_limit', 10),
  );
  return $form;
}

/**
 * Implements hook_block_save().
 */
function tic_carto_count_block_save($delta, $edit) {
  variable_set('tic_carto_count_' . $delta . '_block_limit', $edit['tic_carto_count_' . $delta . '_block_limit']);
}

/**
 * Implements hook_block_view().
 */
function tic_carto_count_block_view($delta) {
  switch ($delta) {
    case 'top_files':
      $blocks['subject'] = t('Top Downloaded Files');
      $blocks['content'] = _tic_carto_count_block_contents('top_files');
      break;

    case 'recent_files':
      $blocks['subject'] = t('Recently Downloaded Files');
      $blocks['content'] = _tic_carto_count_block_contents('recent_files');
      break;
  }

  return $blocks;
}

/**
 * Generate block contents based on delta.
 */
function _tic_carto_count_block_contents($block) {
  $limit = (int) variable_get('tic_carto_count_' . $block . '_block_limit', 10);
  $rows = array();
  if ($block == 'top_files') {
    $sql = 'SELECT dcc.fid, dcc.count, f.filename, f.filesize FROM {tic_carto_count_cache} dcc JOIN {file_managed} f ON dcc.fid = f.fid ORDER BY dcc.count DESC';
  }
  else {
    $sql = 'SELECT dc.fid, MAX(dc.timestamp) as date, f.filename, f.filesize FROM {tic_carto_count} dc JOIN {file_managed} f ON dc.fid = f.fid GROUP BY dc.fid ORDER BY date DESC';
  }

  $header[] = array(
    'data' => t('Name'),
    'class' => 'filename',
  );
  $header[] = array(
    'data' => t('Size'),
    'class' => 'size',
  );
  $header[] = array(
    'data' => $block == 'top_files' ? t('Count') : t('Last Downloaded'),
    'class' => $block == 'top_files' ? 'count' : 'last',
  );

  $result = db_query_range($sql, 0, $limit);
  foreach ($result as $file) {
    $row = array();
    $row[] = check_plain($file->filename);
    $row[] = format_size($file->filesize);
    $row[] = $block == 'top_files' ? $file->count : t('%time ago', array('%time' => format_interval(REQUEST_TIME - $file->date)));
    $rows[] = $row;
  }

  if (count($rows)) {
    return theme('table', array('header' => $header, 'rows' => $rows, 'sticky' => FALSE));
  }
  else {
	  return ' ';
  }
}

/**
 * Implements hook_theme().
 */
function tic_carto_count_theme() {
  $theme= array(
    'tic_carto_count_file_field_formatter' => array(
    'variables' => array('file' => NULL),
    'file' => 'includes/tic_carto_count.field.inc',
    ),
  );
  return $theme;
}

/**
 * Implements hook_node_insert
 */
function tic_carto_count_node_insert($node) {
	$query = db_insert('tic_carto_count')
		->fields(Array(
			'nid' => $node->nid,
			'count' => 0,
		))
		->execute();
	;
}

/**
 * Implements hook node delete
 */
function tic_carto_count_node_delete($node) {
	$query = db_delete('tic_carto_count')
		->condition('nid', $node->nid)
		->execute()
	;
}

function tic_carto_count_get_node_download_count($nid) {
	$count = db_select('tic_carto_count', 'cc')
		->fields('cc', array('count'))
		->condition('cc.nid', $nid)
		->execute()
		->fetchCol()
	;
	
	if(is_array($count)) {
		if (!empty($count)) {
			return $count[0];
		}
	}
	
	return "0";
}
