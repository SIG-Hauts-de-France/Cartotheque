<?php
/**
 *
 * TODO: hook node save pour push tic_geosource
 * hook node update pour update tic_geosource ?
 * cron synchro vers tic_geosource
 * hook push vers tic_geosource a la sauvegarde d'une carte
 *
 */

// DEBUG
function tic_geosource_node_view($node, $v, $e) {
	
	//var_dump($node->field_image_carte['und'][0]);
	return;
	/*
	$data = $node->field_auteur['und'][0];
	$relatedContact = node_load($data['nid']);
	var_dump($relatedContact->field_adresse_email['und'][0]['email']); die();
	 */

	//var_dump($node->field_numero_de_carte['und'][0]['value']); die();
	//var_dump($node->field_image_carte); die();
}

/**
 * Implements hook_help()
 *
 * @param current path
 * @param array 
 */
function tic_geosource_help($path, $args) {
	switch($path) {
		case "admin/help#tic_geosource":
			return '<p>' . t(' tic_geosource ') .'</p>';
			break;
	}
}

/**
 * Implements hook_menu
 */
function tic_geosource_menu() {
	$items = array();
	
	$items['tic_geosource/create_contact_ajax'] = array(
		'title' => 'Ajax backend',
		'page callback' => 'tic_geosource_addcontact_ajax_submit',
		'access callback' => true,
		'absolute' => true,
		'type' => MENU_CALLBACK,
	);
	
	$items['admin/config/services/geosource'] = array(
		'title' => 'Publication Geosource',
		'description' => 'Réglages de publication Geosource',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('tic_geosource_config'),
		'access arguments' => array('administer site configuration'),
		'file' => 'includes/tic_geosource.settings.inc',
	);
	
	$items['admin/config/services/geosource/test'] = array(
		'title' => 'Test de la configuration Geosource',
		'description' => 'Tester la configuration de Geosource',
		'page callback' => 'tic_geosource_configtest',
		'access arguments' => array('administer site configuration'),
		'file' => 'includes/tic_geosource.settings.inc',
	);
	
	return $items;
}


/**
 * Implements hook_form_alter
 *
 */
function tic_geosource_form_alter(&$form, &$form_state, $form_id) {
	
	// TODO: si edition de carte, enlever le champ 'type de carte'
	// adapter les champs en fonction du type de carte (statique ou dynamique
	if ($form_id == 'carte_node_form') {
		$form_state['no_cache'] = TRUE;
		
		drupal_add_library('system', 'ui.dialog');
		
		$form['#attached']['js'] = array(
			drupal_get_path('module', 'tic_geosource') . '/js/carto_form.js',
			drupal_get_path('module', 'tic_geosource') . '/js/chosen/chosen.jquery.min.js',
		);
		
		drupal_add_css(
			drupal_get_path('module', 'tic_geosource') . '/js/chosen/chosen.min.css',
			array('group' => CSS_THEME, 'type' => 'file')
		);
		
		$form["field_auteur"]['#suffix'] = '<a href="#" id="addContactLink">Ajouter un contact</a>';
		
		$form['#validate'][] = 'tic_geosource_form_validate';
		
		return $form;
	}
}

/**
 * Implements hook_node_validate
 */
function tic_geosource_form_validate(&$form, &$form_state) {
	//formalisme numero de carte
	//checks différents si carte statique ou dynamique
	
	drupal_add_library('system', 'ui.dialog');
	$form['#attached']['js'] = array(
		drupal_get_path('module', 'tic_geosource') . '/js/carto_form.js',
		drupal_get_path('module', 'tic_geosource') . '/js/chosen/chosen.jquery.min.js',
	);
	
	drupal_add_css(
		drupal_get_path('module', 'tic_geosource') . '/js/chosen/chosen.min.css',
		array('group' => CSS_THEME, 'type' => 'file')
	);
	
	return $form;
}

/**
 * Callback ajax de création de contact lors de la creation d'une carte
 */
function tic_geosource_addcontact_ajax_submit($form, &$form_state) {
	global $user;
	
	if (!user_access('create carto content')) {
		$ret = array('code' => 'error', 'reason' => 'Vous n\'avez pas la permission de créer des contacts');
		drupal_json_output($ret);
		drupal_exit();
	}
	
	
	//TODO: Verifier si les donnees sont ok et si l'email n'est pas deja utilisé
	$name = $_GET['nom'];
	$email = $_GET['email'];
	
	if (!valid_email_address($email)) {
		$ret = Array('code' => 'error', 'reason' => 'Adresse email invalide !');
		drupal_json_output($ret);
		drupal_exit();
	}
	
	// TODO: requête SQL pour vérifier que l'adresse mail est unique
	
	$contact = new StdClass();
	$contact->type = 'contact';
	$contact->title = $name;
	$contact->uid = $user->uid;
	$contact->language = LANGUAGE_NONE;
	
	//TODO: vérifier que le node a bien été sauvé; ajouter langue
	node_save($contact);
	$node_wrapper = entity_metadata_wrapper('node', $contact);
	$node_wrapper->field_adresse_email->set($email);
	$node_wrapper->save();
	
	$ret = Array('code' => 'success', 'nid' => $contact->nid, 'title' => $contact->title);
	drupal_json_output($ret);
	drupal_exit();
}

/**
 * Implements hook_node_presave
 *
 */
function tic_geosource_node_presave($node) {
	if (! $node->type == 'carte')
		return;
	
	if ($node->is_new) {
		$uuid = tic_geosource_insert_record($node);
		if($uuid) {
			$node->field_uuid['und'][0]['value'] = $uuid;
		}
	}
	else {
		//TODO: update geosource record
	}
	
}

/**
 * Loads a CWS client
 *
 * @return cswGeoClient Instance
 */
function tic_geosource_load_csw_client() {
	//TODO: installer pear directement ?
	set_include_path(get_include_path() . PATH_SEPARATOR . dirname(__FILE__) . '/vendor');
	require_once dirname(__FILE__) . '/vendor/cswGeoClient.php';
	
	$cswServer = variable_get('geosource_server_url', '');
	$username = variable_get('geosource_server_user', '');
	$password = variable_get('geosource_server_password', '');
	$authAddress = variable_get('geosource_server_auth_address', '');
	
	if($authAddress != '') {
		return new cswGeoClient($cswServer, $username, $password, $authAddress);
	}
	else {
		return new cswGeoClient($cswServer);
	}
}

/**
 * Load divengine template engine (http://divengine.com)
 *
 */
function tic_geosource_load_divengine() {
	// Reconfigure div to avoid conflicts with xml language
	define('DIV_TAG_MACRO_BEGIN', '<?php');
	
	require_once dirname(__FILE__) . '/vendor/div.php';
}

/**
 * Convert a region to a bbox
 *
 * TODO: fixer les bboxs
 * @param string region
 * @return array bbox
 */
function tic_geosource_region_to_bbox($region) {
	// default: world wide
	$bbox = Array(
		"west" => '-180',
		"east" => '180',
		"north" => '-90',
		"south" => '90',
	);
	
	switch($region) {
		case 'Europe':
			$bbox['west'] = '-18';
			$bbox['east'] = '46';
			$bbox['north'] = '71';
			$bbox['south'] = '33';
			break;
		case 'France':
			$bbox['west'] = '-6';
			$bbox['east'] = '9';
			$bbox['north'] = '51';
			$bbox['south'] = '42';
			
			break;
		case 'Région':
			$bbox['west'] = '-31';
			$bbox['east'] = '40';
			$bbox['north'] = '81';
			$bbox['south'] = '24';
			
			break;
		case 'Département':
			$bbox['west'] = '-31';
			$bbox['east'] = '40';
			$bbox['north'] = '81';
			$bbox['south'] = '24';
			
			break;
		case 'Infra-départemental':
			$bbox['west'] = '-31';
			$bbox['east'] = '40';
			$bbox['north'] = '81';
			$bbox['south'] = '24';
			
			break;
	}
	
	return $bbox;
}


/**
 * Convert a drupal node to an array for divengine template
 *
 * @param stdClass drupal node
 * @return array paramters for divengine template
 */
function tic_geosource_drupal_node_to_geosource_array($node) {
	//load contact info
	$data = $node->field_auteur['und'][0];
	$relatedContact = node_load($data['nid']);
	
	$bbox = tic_geosource_region_to_bbox($node->field_emprise_geographique['und'][0]['value']);
	
	$keywords = array();
	foreach ($node->field_mots_cles['und'] as $k) {
		$keywords[] = $k['name'];
	}
	
	$files = array();
	
	//var_dump($node->field_image_carte); die();
	
	if(is_array($node->field_image_carte)) {
		$f = $node->field_image_carte['und'][0];
		$files[] = array(
			'name' => $f['filename'],
			'url' => file_create_url($f['uri']),
			'filetype' => $f['filemime'],
			'version' => '1.0',
		);
	}
	
	return array(
			'language_code' => 'fr',
			'author_name' => $relatedContact->title,
			'author_organisation' => 'NONE',
			'author_email' => $relatedContact->field_adresse_email['und'][0]['email'],
			//'creation_date' => '2015-11-13T08:43:18',
			'creation_date' => date("Y-m-dTH:i:s"),
			'map_title' => $node->title,
			'map_creation_date' => date("Y-m-d"),
			'map_abstract' => 'NONE',
			'map_purpose' => 'NONE',
			'map_number' => $node->field_numero_de_carte['und'][0]['value'],
			'map_resolution' => $node->field_echelle['und'][0]['value'],
			'map_url' => 'http://www.ada.gov/lawenfcomm.pdf',
			'bbox' => $bbox,
			'keywords' => $keywords,
			'files' => $files,
	);
}

/**
 * Save metadata to geosource
 * 
 * @param stdClass Drupal node
 * @return string Geosource UUID
 */
function tic_geosource_insert_record($node) {
	
	tic_geosource_load_divengine();
	
	$template = dirname(__FILE__) . '/templates/insert.tpl';
	
	$xmlString = new div($template, tic_geosource_drupal_node_to_geosource_array($node));
	//Create XML Request
	$dom = new DOMDocument('1.0');
	$dom->loadXML((string)$xmlString);
	//submit request
	$client = tic_geosource_load_csw_client();
	try {
		$uuid = $client->insertMetadata($dom);
	}
	catch (Exception $e) {
		//TODO: remplacer par set_message
		die($e->getMessage());
	}
	
	if(is_array($uuid)) {
		return $uuid[0];
	}
	else {
		return false;
	}
}

// TODO
function tic_geosource_update_record($node) {
	return true;
}
